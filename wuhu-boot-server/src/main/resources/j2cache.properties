##################### J2Cache 配置

# 缓存广播方法,可选值如下(自定义缓存广播策略,可以实现net.oschina.j2cache.cluster.ClusterPolicy):
# jgroups:使用jgroups的多播
# redis:使用redis发布/订阅机制(使用jedis客户端)
# lettuce:使用redis发布/订阅机制(使用lettuce客户端,推荐)
# rabbitmq:使用RabbitMQ发布者/使用者机制
# rocketmq:使用RocketMQ发布者/消费者机制
# none:不通知集群中的其他节点
j2cache.broadcast = redis
# jgroups广播channel名称
jgroups.channel.name = j2cache
# jgroups广播xml配置文件路径
jgroups.configXml = /network.xml

# RabbitMQ properties
rabbitmq.exchange = j2cache
rabbitmq.host = localhost
rabbitmq.port = 5672
rabbitmq.username = guest
rabbitmq.password = guest

# RocketMQ properties
rocketmq.name = j2cache
rocketmq.topic = j2cache
# use ; to split multi hosts
rocketmq.hosts = 127.0.0.1:9876

#########################################
# Level 1&2 provider
# values:
# none -> disable this level cache
# ehcache -> use ehcache2 as level 1 cache
# ehcache3 -> use ehcache3 as level 1 cache
# caffeine -> use caffeine as level 1 cache(only in memory)
# redis -> use redis as level 2 cache (using jedis)
# lettuce -> use redis as level 2 cache (using lettuce)
# readonly-redis -> use redis as level 2 cache ,but never write data to it. if use this provider, you must uncomment `j2cache.L2.config_section` to make the redis configurations available.
# memcached -> use memcached as level 2 cache (xmemcached),
# [classname] -> use custom provider
#########################################

j2cache.L1.provider_class = caffeine
j2cache.L2.provider_class = redis

# When L2 provider isn't `redis`, using `L2.config_section = redis` to read redis configurations
# j2cache.L2.config_section = redis

# Enable/Disable ttl in redis cache data (if disabled, the object in redis will never expire, default:true)
# NOTICE: redis hash mode (redis.storage = hash) do not support this feature)
j2cache.sync_ttl_to_redis = true

# Whether to cache null objects by default (default false)
j2cache.default_cache_null_object = true

#########################################
# 缓存序列化提供程序(自定义缓存序列化,可以实现Serializer接口)
# values:
# fst:使用fast序列化(推荐)。
# kryo:使用kryo序列化。
# json:使用fst json序列化(一般用于测试环境)。
# fastjson:使用fastjson序列化(不支持嵌入非静态类)
# java:使用java标准序列化(不推荐)
# fse:使用fse序列化
#########################################
j2cache.serialization = json

#########################################
# Ehcache configuration
#########################################

# ehcache.configXml = /ehcache.xml

# ehcache3.configXml = /ehcache3.xml
# ehcache3.defaultHeapSize = 1000

#########################################
# Caffeine configuration
# caffeine.region.[name] = size, xxxx[s|m|h|d]
#
#########################################
caffeine.properties = /caffeine.properties

#########################################
# Redis connection configuration
#########################################


##################### Redis(L2 Cache)配置

#########################################
# Redis Cluster Mode
#
# single -> single redis server
# sentinel -> master-slaves servers
# cluster -> cluster servers (\u6570\u636e\u5e93\u914d\u7f6e\u65e0\u6548\uff0c\u4f7f\u7528 database = 0\uff09
# sharded -> sharded servers  (\u5bc6\u7801\u3001\u6570\u636e\u5e93\u5fc5\u987b\u5728 hosts \u4e2d\u6307\u5b9a\uff0c\u4e14\u8fde\u63a5\u6c60\u914d\u7f6e\u65e0\u6548 ; redis://user:password@127.0.0.1:6379/0\uff09
#
#########################################
# RedisClusterMode(Redis集群模式),可选值如下:
# single:单个 Redis 服务器
# sentinel:主从服务器
# cluster:群集服务器
# sharded:分片服务器
redis.mode = single

# redis存储模式,可选值为generic、hash
redis.storage = generic
## redis发布/订阅 channel名称
redis.channel = j2cache
## Redis 发布/订阅服务（在空时使用 redis.hosts）
redis.channel.host =
# 仅用于分片的集群名称
redis.cluster_name = j2cache
# Redis 缓存命名空间可选，默认为空
redis.namespace =
# redis 命令扫描参数计数,默认值1000
redis.scanCount = 1000
# redis连接host,多个host以分号分割
redis.hosts = 127.0.0.1:6379
# redis连接超时时间
redis.timeout = 2000
# redis密码
redis.password =
# redis连接数据库,默认第一个(即0),redis默认有16个数据库
redis.database = 0
# 是否使用 SSL/TLS 连接来保证与 Redis 服务器之间的通信安全性
redis.ssl = false
################# redis连接池属性配置
# 连接池中最大的连接数(默认值为8)
redis.maxTotal = 100
# 连接池中最大的空闲连接数(默认值为8)
redis.maxIdle = 10
# 获取连接时的最大等待时间,单位为毫秒,默认为-1,表示无限等待
redis.maxWaitMillis = 5000
# 连接空闲时间达到此值时,连接将会被移除,默认值为 1800000 毫秒(30分钟)
redis.minEvictableIdleTimeMillis = 60000
# 连接池中的最小空闲连接数,默认值为 0
redis.minIdle = 1
# 每次检查空闲连接时,每次检测的连接数,默认值为 3
redis.numTestsPerEvictionRun = 10
# 连接池中的连接是否采用后进先出（LIFO）方式进行分配，默认为 false，即先进先出（FIFO）
redis.lifo = false
# 在达到最小空闲连接数之后，空闲连接的最小空闲时间，连接将不会被移除，默认值为 -1。
redis.softMinEvictableIdleTimeMillis = 10
# 是否在从连接池获取连接时进行连接的有效性检查，默认值为 false。
redis.testOnBorrow = true
# 是否在向连接池返回连接时进行连接的有效性检查，默认值为 false。
redis.testOnReturn = false
# 是否在连接空闲时进行连接的有效性检查，默认值为 false。
redis.testWhileIdle = true
# 空闲连接检测线程运行时间间隔，单位为毫秒，默认值为 -1，表示不进行检测。
redis.timeBetweenEvictionRunsMillis = 300000
# 当连接池耗尽时，是否阻塞等待获取连接，默认值为 true。
redis.blockWhenExhausted = false
# 是否开启 JMX 支持，默认值为 true，开启后可以通过 JMX 进行监控和管理连接池。
redis.jmxEnabled = false

#########################################
# Lettuce scheme
#
# redis -> single redis server
# rediss -> single redis server with ssl
# redis-sentinel -> redis sentinel
# redis-cluster -> cluster servers
#
#########################################

#########################################
# Lettuce Mode
#
# single -> single redis server
# sentinel -> master-slaves servers
# cluster -> cluster servers (\u6570\u636e\u5e93\u914d\u7f6e\u65e0\u6548\uff0c\u4f7f\u7528 database = 0\uff09
# sharded -> sharded servers  (\u5bc6\u7801\u3001\u6570\u636e\u5e93\u5fc5\u987b\u5728 hosts \u4e2d\u6307\u5b9a\uff0c\u4e14\u8fde\u63a5\u6c60\u914d\u7f6e\u65e0\u6548 ; redis://user:password@127.0.0.1:6379/0\uff09
#
#########################################

## redis命令扫描参数计数,默认值[1000]
lettuce.scanCount = 1000
lettuce.mode = single
lettuce.namespace =
lettuce.storage = hash
lettuce.channel = j2cache
lettuce.scheme = redis
lettuce.hosts = 127.0.0.1:6379
lettuce.password =
lettuce.database = 0
lettuce.sentinelMasterId =
lettuce.sentinelPassword =
lettuce.maxTotal = 100
lettuce.maxIdle = 10
lettuce.minIdle = 10
# timeout in milliseconds
lettuce.timeout = 10000
# redis cluster topology refresh interval in milliseconds
lettuce.clusterTopologyRefresh = 3000
